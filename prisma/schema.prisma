generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@index([userId])
}

model User {
  id             String    @id @default(uuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  admin          Boolean?

  accounts Account[]
  sessions Session[]
}

model Patient {
  id                String           @id @default(uuid())
  name              String?
  email             String?          @unique
  createdAt         DateTime         @default(now())
  healthInsurance   HealthInsurance? @relation(fields: [healthInsuranceId], references: [id])
  appointments      Appointment[]
  healthInsuranceId String?

  @@index([healthInsuranceId])
}

model HealthInsurance {
  id       String    @id @default(uuid())
  name     String?   @unique
  patients Patient[]
}

model Appointment {
  id        String   @id @default(uuid())
  busy      Boolean
  createdAt DateTime @default(now())

  day       Day?    @relation(fields: [dayId], references: [id], onDelete: Cascade)
  dayId     String?
  time      Time?   @relation(fields: [timeId], references: [id], onDelete: Cascade)
  timeId    String?
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId String

  @@index([dayId])
  @@index([timeId])
  @@index([patientId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Time {
  id        String   @id @default(uuid())
  startTime String   @unique
  endTime   String   @unique
  createdAt DateTime @default(now())

  Day   Day?    @relation(fields: [dayId], references: [id], onDelete: Cascade)
  dayId String?

  Appointment Appointment[]

  @@index([dayId])
}

model Day {
  id        String   @id @default(uuid())
  weekday   String   @unique(sort: Asc)
  createdAt DateTime @default(now())

  appointments Appointment[]
  Time         Time[]
}
